name: Deploy to AWS EC2 with SSH

on:
  push:
    branches: [ "deployment" ]

env:
  PROJECT_PATH: /home/ubuntu/Agente_Terry
  DOCKER_COMPOSE_FILE: docker-compose.yaml

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          # Create deployment script
          echo "#!/bin/bash
          cd ${{ env.PROJECT_PATH }}
          
          # Backup existing .env if it exists
          if [ -f .env ]; then
            cp .env .env.backup
          fi
          
          # Pull latest changes
          git fetch --all
          git reset --hard origin/deployment
          
          # Restore .env file
          if [ -f .env.backup ]; then
            cp .env.backup .env
          fi
          
          # Stop running containers
          docker-compose down
          
          # Remove old images
          docker system prune -af --force
          
          # Build and start new containers
          docker-compose build --no-cache
          docker-compose up -d
          
          # Check containers status
          docker-compose ps
          
          # Clean up old images and containers
          docker system prune -af --force --volumes" > deploy.sh
          
          # Copy and execute deployment script
          scp -o StrictHostKeyChecking=no deploy.sh ubuntu@${{ secrets.EC2_HOST }}:${{ env.PROJECT_PATH }}/
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "chmod +x ${{ env.PROJECT_PATH }}/deploy.sh && ${{ env.PROJECT_PATH }}/deploy.sh"

      - name: Verify Deployment
        run: |
          # Wait for deployment to complete
          sleep 30
          
          # Check container status
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} "cd ${{ env.PROJECT_PATH }} && docker-compose ps"

      - name: Deployment Status Notification
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi